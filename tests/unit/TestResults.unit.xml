<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="86" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2019-11-10" time="09:35:04">
  <environment user="Dan" machine-name="PLAGUE02" cwd="C:\Users\Dan\Source\GitHub\LabBuilder" user-domain="PLAGUE02" platform="Microsoft Windows 10 Enterprise|C:\WINDOWS|\Device\Harddisk1\Partition4" nunit-version="2.5.8.0" os-version="10.0.19013" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-NZ" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="60.6614" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name=".\test\unit\lib\private\utils.tests.ps1" executed="True" result="Success" success="True" time="60.6614" asserts="0" description=".\test\unit\lib\private\utils.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1" executed="True" result="Success" success="True" time="2.6504" asserts="0" description="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1">
            <results>
              <test-suite type="TestFixture" name="When Download folder does not exist" executed="True" result="Success" success="True" time="0.4384" asserts="0" description="When Download folder does not exist">
                <results>
                  <test-case description="Throws a DownloadFolderDoesNotExistError Exception" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Download folder does not exist.Throws a DownloadFolderDoesNotExistError Exception" time="0.0495" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Download folder does not exist.Calls appropriate mocks" time="0.0412" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Download fails" executed="True" result="Success" success="True" time="0.4787" asserts="0" description="When Download fails">
                <results>
                  <test-case description="Throws a FileDownloadError Exception" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Download fails.Throws a FileDownloadError Exception" time="0.0755" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Download fails.Calls appropriate mocks" time="0.0796" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Download OK" executed="True" result="Success" success="True" time="0.4688" asserts="0" description="When Download OK">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Download OK.Does not throw an Exception" time="0.0859" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Download OK.Calls appropriate mocks" time="0.0784" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Zip Download OK, Extract fails" executed="True" result="Success" success="True" time="0.5929" asserts="0" description="When Zip Download OK, Extract fails">
                <results>
                  <test-case description="Throws a FileExtractError Exception" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Zip Download OK, Extract fails.Throws a FileExtractError Exception" time="0.1348" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Zip Download OK, Extract fails.Calls appropriate mocks" time="0.1108" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Zip Download OK, Extract OK" executed="True" result="Success" success="True" time="0.5102" asserts="0" description="When Zip Download OK, Extract OK">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Zip Download OK, Extract OK.Does not throw an Exception" time="0.1397" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Invoke-LabDownloadAndUnzipFile.ps1.When Zip Download OK, Extract OK.Calls appropriate mocks" time="0.0649" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Invoke-LabDownloadResourceModule.ps1" executed="True" result="Success" success="True" time="46.7703" asserts="0" description="\lib\private\Invoke-LabDownloadResourceModule.ps1">
            <results>
              <test-suite type="TestFixture" name="When Correct module already installed; Valid URL and Folder passed" executed="True" result="Success" success="True" time="0.4072" asserts="0" description="When Correct module already installed; Valid URL and Folder passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct module already installed; Valid URL and Folder passed.Does not throw an Exception" time="0.0683" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct module already installed; Valid URL and Folder passed.Should call appropriate Mocks" time="0.1538" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Module is not installed; Valid URL and Folder passed" executed="True" result="Success" success="True" time="0.8757" asserts="0" description="When Module is not installed; Valid URL and Folder passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Module is not installed; Valid URL and Folder passed.Does not throw an Exception" time="0.3254" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Module is not installed; Valid URL and Folder passed.Should call appropriate Mocks" time="0.3111" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Module is not installed; No URL or Folder passed" executed="True" result="Success" success="True" time="6.8872" asserts="0" description="When Module is not installed; No URL or Folder passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Module is not installed; No URL or Folder passed.Does not throw an Exception" time="6.5676" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Module is not installed; No URL or Folder passed.Should call appropriate Mocks" time="0.1485" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Wrong version of module is installed; Valid URL, Folder and Required Version passed" executed="True" result="Success" success="True" time="0.7559" asserts="0" description="When Wrong version of module is installed; Valid URL, Folder and Required Version passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; Valid URL, Folder and Required Version passed.Does not throw an Exception" time="0.2566" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; Valid URL, Folder and Required Version passed.Should call appropriate Mocks" time="0.3057" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Wrong version of module is installed; No URL or Folder passed, but Required Version passed" executed="True" result="Success" success="True" time="6.7012" asserts="0" description="When Wrong version of module is installed; No URL or Folder passed, but Required Version passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; No URL or Folder passed, but Required Version passed.Does not throw an Exception" time="6.3145" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; No URL or Folder passed, but Required Version passed.Should call appropriate Mocks" time="0.177" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Correct version of module is installed; Valid URL, Folder and Required Version passed" executed="True" result="Success" success="True" time="0.4226" asserts="0" description="When Correct version of module is installed; Valid URL, Folder and Required Version passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct version of module is installed; Valid URL, Folder and Required Version passed.Does not throw an Exception" time="0.0429" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct version of module is installed; Valid URL, Folder and Required Version passed.Should call appropriate Mocks" time="0.1951" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Correct version of module is installed; No URL and Folder passed, but Required Version passed" executed="True" result="Success" success="True" time="0.4667" asserts="0" description="When Correct version of module is installed; No URL and Folder passed, but Required Version passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct version of module is installed; No URL and Folder passed, but Required Version passed.Does not throw an Exception" time="0.056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct version of module is installed; No URL and Folder passed, but Required Version passed.Should call appropriate Mocks" time="0.1771" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Wrong version of module is installed; Valid URL, Folder and Minimum Version passed" executed="True" result="Success" success="True" time="0.8585" asserts="0" description="When Wrong version of module is installed; Valid URL, Folder and Minimum Version passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; Valid URL, Folder and Minimum Version passed.Does not throw an Exception" time="0.2969" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; Valid URL, Folder and Minimum Version passed.Should call appropriate Mocks" time="0.3598" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Wrong version of module is installed; No URL and Folder passed, but Minimum Version passed" executed="True" result="Success" success="True" time="6.7849" asserts="0" description="When Wrong version of module is installed; No URL and Folder passed, but Minimum Version passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; No URL and Folder passed, but Minimum Version passed.Does not throw an Exception" time="6.3636" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; No URL and Folder passed, but Minimum Version passed.Should call appropriate Mocks" time="0.2156" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Correct version of module is installed; Valid URL, Folder and Minimum Version passed" executed="True" result="Success" success="True" time="0.4306" asserts="0" description="When Correct version of module is installed; Valid URL, Folder and Minimum Version passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct version of module is installed; Valid URL, Folder and Minimum Version passed.Does not throw an Exception" time="0.0465" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct version of module is installed; Valid URL, Folder and Minimum Version passed.Should call appropriate Mocks" time="0.193" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Correct version of module is installed; No URL and Folder passed, but Minimum Version passed" executed="True" result="Success" success="True" time="0.4509" asserts="0" description="When Correct version of module is installed; No URL and Folder passed, but Minimum Version passed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct version of module is installed; No URL and Folder passed, but Minimum Version passed.Does not throw an Exception" time="0.0431" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Correct version of module is installed; No URL and Folder passed, but Minimum Version passed.Should call appropriate Mocks" time="0.1984" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Module is not installed; Bad URL passed" executed="True" result="Success" success="True" time="0.5579" asserts="0" description="When Module is not installed; Bad URL passed">
                <results>
                  <test-case description="Throws a FileDownloadError exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Module is not installed; Bad URL passed.Throws a FileDownloadError exception" time="0.1229" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Module is not installed; Bad URL passed.Should call appropriate Mocks" time="0.2297" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Module is not installed; Not available in Repository" executed="True" result="Success" success="True" time="6.751" asserts="0" description="When Module is not installed; Not available in Repository">
                <results>
                  <test-case description="Throws a ModuleNotAvailableError exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Module is not installed; Not available in Repository.Throws a ModuleNotAvailableError exception" time="6.2992" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Module is not installed; Not available in Repository.Should call appropriate Mocks" time="0.2442" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Wrong version of module is installed; No URL or Folder passed, but Required Version passed. Required Version is not available" executed="True" result="Success" success="True" time="6.7785" asserts="0" description="When Wrong version of module is installed; No URL or Folder passed, but Required Version passed. Required Version is not available">
                <results>
                  <test-case description=" Throws a ModuleNotAvailableError Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; No URL or Folder passed, but Required Version passed. Required Version is not available. Throws a ModuleNotAvailableError Exception" time="6.3179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; No URL or Folder passed, but Required Version passed. Required Version is not available.Should call appropriate Mocks" time="0.2502" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Wrong version of module is installed; No URL or Folder passed, but Minimum Version passed. Minimum Version is not available" executed="True" result="Success" success="True" time="6.7765" asserts="0" description="When Wrong version of module is installed; No URL or Folder passed, but Minimum Version passed. Minimum Version is not available">
                <results>
                  <test-case description=" Throws a ModuleNotAvailableError Exception" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; No URL or Folder passed, but Minimum Version passed. Minimum Version is not available. Throws a ModuleNotAvailableError Exception" time="6.3179" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call appropriate Mocks" name="\lib\private\Invoke-LabDownloadResourceModule.ps1.When Wrong version of module is installed; No URL or Folder passed, but Minimum Version passed. Minimum Version is not available.Should call appropriate Mocks" time="0.2524" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\New-LabCredential.ps1" executed="True" result="Success" success="True" time="0.1957" asserts="0" description="\lib\private\New-LabCredential.ps1">
            <results>
              <test-suite type="TestFixture" name="When Username and Password provided" executed="True" result="Success" success="True" time="0.1248" asserts="0" description="When Username and Password provided">
                <results>
                  <test-case description="Should return the exepected credential object" name="\lib\private\New-LabCredential.ps1.When Username and Password provided.Should return the exepected credential object" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Install-LabHyperV.ps1" executed="True" result="Success" success="True" time="1.0841" asserts="0" description="\lib\private\Install-LabHyperV.ps1">
            <results>
              <test-suite type="TestFixture" name="When The function is called" executed="True" result="Success" success="True" time="0.5271" asserts="0" description="When The function is called">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Install-LabHyperV.ps1.When The function is called.Does not throw an Exception" time="0.2281" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Install-LabHyperV.ps1.When The function is called.Calls appropriate mocks" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Enable-LabWSMan.ps1" executed="True" result="Success" success="True" time="0.756" asserts="0" description="\lib\private\Enable-LabWSMan.ps1">
            <results>
              <test-suite type="TestFixture" name="When WS-Man is already enabled" executed="True" result="Success" success="True" time="0.2811" asserts="0" description="When WS-Man is already enabled">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Enable-LabWSMan.ps1.When WS-Man is already enabled.Does not throw an Exception" time="0.0436" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Enable-LabWSMan.ps1.When WS-Man is already enabled.Calls appropriate mocks" time="0.018" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When WS-Man is not enabled, user declines install" executed="True" result="Success" success="True" time="0.3989" asserts="0" description="When WS-Man is not enabled, user declines install">
                <results>
                  <test-case description="Should throw WSManNotEnabledError exception" name="\lib\private\Enable-LabWSMan.ps1.When WS-Man is not enabled, user declines install.Should throw WSManNotEnabledError exception" time="0.1403" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Enable-LabWSMan.ps1.When WS-Man is not enabled, user declines install.Calls appropriate mocks" time="0.0319" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Get-NextMacAddress.ps1" executed="True" result="Success" success="True" time="0.4021" asserts="0" description="\lib\private\Get-NextMacAddress.ps1">
            <results>
              <test-suite type="TestFixture" name="When MAC address 00155D0106ED is passed" executed="True" result="Success" success="True" time="0.0952" asserts="0" description="When MAC address 00155D0106ED is passed">
                <results>
                  <test-case description="Returns MAC address 00155D0106EE" name="\lib\private\Get-NextMacAddress.ps1.When MAC address 00155D0106ED is passed.Returns MAC address 00155D0106EE" time="0.0186" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When MAC address 00155D0106ED and step 10 is passed" executed="True" result="Success" success="True" time="0.1148" asserts="0" description="When MAC address 00155D0106ED and step 10 is passed">
                <results>
                  <test-case description="Returns IP address 00155D0106F7" name="\lib\private\Get-NextMacAddress.ps1.When MAC address 00155D0106ED and step 10 is passed.Returns IP address 00155D0106F7" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When MAC address 00155D0106ED and step 0 is passed" executed="True" result="Success" success="True" time="0.0979" asserts="0" description="When MAC address 00155D0106ED and step 0 is passed">
                <results>
                  <test-case description="Returns IP address 00155D0106ED" name="\lib\private\Get-NextMacAddress.ps1.When MAC address 00155D0106ED and step 0 is passed.Returns IP address 00155D0106ED" time="0.0209" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Get-LabNextIpAddress.ps1" executed="True" result="Success" success="True" time="0.8508" asserts="0" description="\lib\private\Get-LabNextIpAddress.ps1">
            <results>
              <test-suite type="TestFixture" name="When Invalid IP Address is passed" executed="True" result="Success" success="True" time="0.1033" asserts="0" description="When Invalid IP Address is passed">
                <results>
                  <test-case description="Throws a IPAddressError Exception" name="\lib\private\Get-LabNextIpAddress.ps1.When Invalid IP Address is passed.Throws a IPAddressError Exception" time="0.0308" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When IP address 192.168.1.1 is passed" executed="True" result="Success" success="True" time="0.1035" asserts="0" description="When IP address 192.168.1.1 is passed">
                <results>
                  <test-case description="Returns IP address 192.168.1.2" name="\lib\private\Get-LabNextIpAddress.ps1.When IP address 192.168.1.1 is passed.Returns IP address 192.168.1.2" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When IP address 192.168.1.255 is passed" executed="True" result="Success" success="True" time="0.1002" asserts="0" description="When IP address 192.168.1.255 is passed">
                <results>
                  <test-case description="Returns IP address 192.168.2.0" name="\lib\private\Get-LabNextIpAddress.ps1.When IP address 192.168.1.255 is passed.Returns IP address 192.168.2.0" time="0.0225" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When IP address 192.168.1.255 and Step 10 is passed" executed="True" result="Success" success="True" time="0.1004" asserts="0" description="When IP address 192.168.1.255 and Step 10 is passed">
                <results>
                  <test-case description="Returns IP address 192.168.2.9" name="\lib\private\Get-LabNextIpAddress.ps1.When IP address 192.168.1.255 and Step 10 is passed.Returns IP address 192.168.2.9" time="0.0181" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When IP address 192.168.1.255 and Step 0 is passed" executed="True" result="Success" success="True" time="0.1137" asserts="0" description="When IP address 192.168.1.255 and Step 0 is passed">
                <results>
                  <test-case description="Returns IP address 192.168.1.255" name="\lib\private\Get-LabNextIpAddress.ps1.When IP address 192.168.1.255 and Step 0 is passed.Returns IP address 192.168.1.255" time="0.0234" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When IP address 10.255.255.255 is passed" executed="True" result="Success" success="True" time="0.0988" asserts="0" description="When IP address 10.255.255.255 is passed">
                <results>
                  <test-case description="Returns IP address 11.0.0.0" name="\lib\private\Get-LabNextIpAddress.ps1.When IP address 10.255.255.255 is passed.Returns IP address 11.0.0.0" time="0.0234" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When IP address fe80::15b4:b934:5d23:1a31 is passed" executed="True" result="Success" success="True" time="0.1055" asserts="0" description="When IP address fe80::15b4:b934:5d23:1a31 is passed">
                <results>
                  <test-case description="Returns IP address fe80::15b4:b934:5d23:1a32" name="\lib\private\Get-LabNextIpAddress.ps1.When IP address fe80::15b4:b934:5d23:1a31 is passed.Returns IP address fe80::15b4:b934:5d23:1a32" time="0.0218" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Assert-LabValidIpAddress.ps1" executed="True" result="Success" success="True" time="0.4949" asserts="0" description="\lib\private\Assert-LabValidIpAddress.ps1">
            <results>
              <test-suite type="TestFixture" name="When IP address 192.168.1.1 is passed" executed="True" result="Success" success="True" time="0.0936" asserts="0" description="When IP address 192.168.1.1 is passed">
                <results>
                  <test-case description="Returns IP Address" name="\lib\private\Assert-LabValidIpAddress.ps1.When IP address 192.168.1.1 is passed.Returns IP Address" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When IP address 192.168.1.1000 is passed" executed="True" result="Success" success="True" time="0.0998" asserts="0" description="When IP address 192.168.1.1000 is passed">
                <results>
                  <test-case description="Should Throw an Exception" name="\lib\private\Assert-LabValidIpAddress.ps1.When IP address 192.168.1.1000 is passed.Should Throw an Exception" time="0.0241" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When IP address fe80::15b4:b934:5d23:1a31 is passed" executed="True" result="Success" success="True" time="0.1005" asserts="0" description="When IP address fe80::15b4:b934:5d23:1a31 is passed">
                <results>
                  <test-case description="Returns IP Address" name="\lib\private\Assert-LabValidIpAddress.ps1.When IP address fe80::15b4:b934:5d23:1a31 is passed.Returns IP Address" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When IP address fe80::15b4:b934:5d23:1a3x is passed" executed="True" result="Success" success="True" time="0.1024" asserts="0" description="When IP address fe80::15b4:b934:5d23:1a3x is passed">
                <results>
                  <test-case description="Should Throw an Exception" name="\lib\private\Assert-LabValidIpAddress.ps1.When IP address fe80::15b4:b934:5d23:1a3x is passed.Should Throw an Exception" time="0.0248" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Install-LabPackageProvider.ps1" executed="True" result="Success" success="True" time="1.7908" asserts="0" description="\lib\private\Install-LabPackageProvider.ps1">
            <results>
              <test-suite type="TestFixture" name="When Required package providers already installed" executed="True" result="Success" success="True" time="0.2837" asserts="0" description="When Required package providers already installed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Install-LabPackageProvider.ps1.When Required package providers already installed.Does not throw an Exception" time="0.051" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Install-LabPackageProvider.ps1.When Required package providers already installed.Calls appropriate mocks" time="0.0433" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Required package providers not installed" executed="True" result="Success" success="True" time="1.4311" asserts="0" description="When Required package providers not installed">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Install-LabPackageProvider.ps1.When Required package providers not installed.Does not throw an Exception" time="1.1744" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Install-LabPackageProvider.ps1.When Required package providers not installed.Calls appropriate mocks" time="0.0697" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Register-LabPackageSource.ps1" executed="True" result="Success" success="True" time="2.8745" asserts="0" description="\lib\private\Register-LabPackageSource.ps1">
            <results>
              <test-suite type="TestFixture" name="When Required package sources already registered and trusted" executed="True" result="Success" success="True" time="0.3466" asserts="0" description="When Required package sources already registered and trusted">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Register-LabPackageSource.ps1.When Required package sources already registered and trusted.Does not throw an Exception" time="0.1221" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Register-LabPackageSource.ps1.When Required package sources already registered and trusted.Calls appropriate mocks" time="0.08" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Required package sources already registered but not trusted" executed="True" result="Success" success="True" time="1.7393" asserts="0" description="When Required package sources already registered but not trusted">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Register-LabPackageSource.ps1.When Required package sources already registered but not trusted.Does not throw an Exception" time="1.3419" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Register-LabPackageSource.ps1.When Required package sources already registered but not trusted.Calls appropriate mocks" time="0.2364" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Required package sources are not registered" executed="True" result="Success" success="True" time="0.6974" asserts="0" description="When Required package sources are not registered">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Register-LabPackageSource.ps1.When Required package sources are not registered.Does not throw an Exception" time="0.2165" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Register-LabPackageSource.ps1.When Required package sources are not registered.Calls appropriate mocks" time="0.3006" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Write-LabMessage.ps1" executed="True" result="Success" success="True" time="1.7227" asserts="0" description="\lib\private\Write-LabMessage.ps1">
            <results>
              <test-suite type="TestFixture" name="When Write an error message" executed="True" result="Success" success="True" time="0.2643" asserts="0" description="When Write an error message">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Write-LabMessage.ps1.When Write an error message.Does not throw an Exception" time="0.0624" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Write-LabMessage.ps1.When Write an error message.Calls appropriate mocks" time="0.0392" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Write a warning message" executed="True" result="Success" success="True" time="0.2521" asserts="0" description="When Write a warning message">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Write-LabMessage.ps1.When Write a warning message.Does not throw an Exception" time="0.0651" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Write-LabMessage.ps1.When Write a warning message.Calls appropriate mocks" time="0.0303" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Write a verbose message" executed="True" result="Success" success="True" time="0.2502" asserts="0" description="When Write a verbose message">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Write-LabMessage.ps1.When Write a verbose message.Does not throw an Exception" time="0.0606" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Write-LabMessage.ps1.When Write a verbose message.Calls appropriate mocks" time="0.0353" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Write a debug message" executed="True" result="Success" success="True" time="0.2469" asserts="0" description="When Write a debug message">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Write-LabMessage.ps1.When Write a debug message.Does not throw an Exception" time="0.0617" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Write-LabMessage.ps1.When Write a debug message.Calls appropriate mocks" time="0.0312" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Write an information message" executed="True" result="Success" success="True" time="0.2496" asserts="0" description="When Write an information message">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Write-LabMessage.ps1.When Write an information message.Does not throw an Exception" time="0.0635" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Write-LabMessage.ps1.When Write an information message.Calls appropriate mocks" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When Write an alert message" executed="True" result="Success" success="True" time="0.2767" asserts="0" description="When Write an alert message">
                <results>
                  <test-case description="Does not throw an Exception" name="\lib\private\Write-LabMessage.ps1.When Write an alert message.Does not throw an Exception" time="0.0692" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls appropriate mocks" name="\lib\private\Write-LabMessage.ps1.When Write an alert message.Calls appropriate mocks" time="0.0358" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\ConvertTo-LabAbsolutePath.ps1" executed="True" result="Success" success="True" time="0.2706" asserts="0" description="\lib\private\ConvertTo-LabAbsolutePath.ps1">
            <results>
              <test-suite type="TestFixture" name="When absolute Path is passed" executed="True" result="Success" success="True" time="0.0961" asserts="0" description="When absolute Path is passed">
                <results>
                  <test-case description="Should return the absolute path" name="\lib\private\ConvertTo-LabAbsolutePath.ps1.When absolute Path is passed.Should return the absolute path" time="0.021" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="When relative Path is passed" executed="True" result="Success" success="True" time="0.0961" asserts="0" description="When relative Path is passed">
                <results>
                  <test-case description="Should return the absolute path" name="\lib\private\ConvertTo-LabAbsolutePath.ps1.When relative Path is passed.Should return the absolute path" time="0.0152" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\lib\private\Get-LabBuilderModulePath.ps1" executed="True" result="Success" success="True" time="0.0962" asserts="0" description="\lib\private\Get-LabBuilderModulePath.ps1">
            <results>
              <test-case description="Should return the path to the LabBuilder Module" name="\lib\private\Get-LabBuilderModulePath.ps1.Should return the path to the LabBuilder Module" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>